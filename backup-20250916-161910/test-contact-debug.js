/**
 * Test d√©taill√© de l'API contact pour identifier le probl√®me exact
 */

// Charger les variables d'environnement
import dotenv from "dotenv";
dotenv.config();

console.log("üîç TEST D√âTAILL√â API CONTACT");
console.log("============================");
console.log("");

// Test avec logs d√©taill√©s
async function testContactWithLogs() {
  console.log("üì§ Envoi d'un message de contact r√©el...");

  const testData = {
    name: "Test Debug Contact",
    email: process.env.ADMIN_EMAIL, // Utiliser votre vraie adresse
    phone: process.env.WHATSAPP_BUSINESS_NUMBER,
    subject: "Debug - Test enregistrement Airtable",
    message:
      "Message de test pour d√©boguer l'enregistrement dans Airtable. Si vous recevez ceci, cela signifie que les notifications fonctionnent mais l'enregistrement Airtable pourrait avoir un probl√®me.",
  };

  console.log("üìã Donn√©es envoy√©es:", JSON.stringify(testData, null, 2));
  console.log("");

  try {
    console.log("üåê Appel API...");
    const response = await fetch(
      "https://fournitures-scolaire.vercel.app/api/contact/send",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(testData),
      }
    );

    console.log(`üì° Statut: ${response.status} ${response.statusText}`);

    const result = await response.json();
    console.log("üìã R√©ponse compl√®te:", JSON.stringify(result, null, 2));

    console.log("");
    console.log("üîç ANALYSE DE LA R√âPONSE:");

    if (response.ok) {
      console.log("‚úÖ API r√©pond correctement (200)");

      if (result.success) {
        console.log("‚úÖ API indique un succ√®s");

        if (result.fallback) {
          console.log("‚ö†Ô∏è MODE FALLBACK ACTIF - Raisons possibles:");
          console.log("   1. Variables d'environnement Airtable manquantes");
          console.log("   2. Erreur lors de l'appel Airtable");
          console.log("   3. Mode fallback forc√© dans le code");

          // V√©rifier si l'enregistrement est quand m√™me dans Airtable
          console.log("");
          console.log("üîç V√©rification Airtable...");
          await checkIfRecordExists(testData.email);
        } else if (result.recordId) {
          console.log(
            `‚úÖ Enregistrement Airtable r√©ussi ! ID: ${result.recordId}`
          );
        } else {
          console.log("‚ö†Ô∏è Pas d'indication d'enregistrement Airtable");
        }
      } else {
        console.log("‚ùå API indique un √©chec");
      }
    } else {
      console.log("‚ùå API en erreur");
      if (result.error) {
        console.log("üí° Erreur:", result.error);
      }
    }
  } catch (error) {
    console.error("‚ùå Erreur lors du test:", error.message);
  }
}

// V√©rifier si le record existe dans Airtable
async function checkIfRecordExists(email) {
  try {
    const response = await fetch(
      `https://api.airtable.com/v0/${process.env.AIRTABLE_BASE_ID}/${process.env.AIRTABLE_CONTACTS_TABLE}?filterByFormula=SEARCH("${email}",{Email})`,
      {
        headers: {
          Authorization: `Bearer ${process.env.AIRTABLE_API_KEY}`,
        },
      }
    );

    if (response.ok) {
      const data = await response.json();
      const records = data.records || [];

      console.log(
        `üìä Records trouv√©s avec l'email "${email}": ${records.length}`
      );

      if (records.length > 0) {
        console.log("‚úÖ Le contact a bien √©t√© enregistr√© dans Airtable !");
        console.log("üìã Derniers records:");
        records.slice(0, 3).forEach((record, index) => {
          console.log(`   ${index + 1}. ID: ${record.id}`);
          console.log(`      Nom: ${record.fields.Name}`);
          console.log(`      Sujet: ${record.fields.Subject}`);
          console.log(`      Date: ${record.createdTime}`);
        });
      } else {
        console.log("‚ùå Aucun contact trouv√© - l'enregistrement a √©chou√©");
      }
    } else {
      console.log("‚ùå Erreur lors de la v√©rification Airtable");
    }
  } catch (error) {
    console.log("‚ùå Erreur v√©rification:", error.message);
  }
}

// Test de l'endpoint local pour comparaison
async function testLocalEndpoint() {
  console.log("");
  console.log("üîç COMPARAISON AVEC TEST LOCAL");
  console.log("==============================");

  // Tester directement l'insertion Airtable
  console.log("üì§ Test insertion directe Airtable...");

  const contactData = {
    records: [
      {
        fields: {
          Name: "Test Local Direct",
          Email: "test.local@debug.com",
          Phone: "221782911844",
          Subject: "Test insertion directe",
          Message: "Test pour comparer avec l'API du site",
        },
      },
    ],
  };

  try {
    const response = await fetch(
      `https://api.airtable.com/v0/${process.env.AIRTABLE_BASE_ID}/${process.env.AIRTABLE_CONTACTS_TABLE}`,
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${process.env.AIRTABLE_API_KEY}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(contactData),
      }
    );

    if (response.ok) {
      const result = await response.json();
      console.log("‚úÖ Insertion directe r√©ussie");
      console.log(`üìã ID cr√©√©: ${result.records[0].id}`);

      console.log("");
      console.log("üí° CONCLUSION:");
      console.log("‚úÖ Airtable fonctionne parfaitement");
      console.log("‚ö†Ô∏è Le probl√®me est dans l'API /api/contact/send");
      console.log(
        "üîß Action: V√©rifier les logs Vercel ou le code de l'endpoint"
      );
    } else {
      const error = await response.json();
      console.log("‚ùå Insertion directe √©chou√©e");
      console.log("üí° Erreur:", JSON.stringify(error, null, 2));
    }
  } catch (error) {
    console.log("‚ùå Erreur insertion directe:", error.message);
  }
}

// Ex√©cution compl√®te
async function runFullTest() {
  try {
    await testContactWithLogs();
    await testLocalEndpoint();

    console.log("");
    console.log("üéØ ACTIONS RECOMMAND√âES:");
    console.log(
      "1. V√©rifiez vos emails pour voir si les notifications arrivent"
    );
    console.log(
      "2. V√©rifiez https://airtable.com pour voir si les contacts sont enregistr√©s"
    );
    console.log(
      "3. Si les contacts n'apparaissent pas, le probl√®me est dans l'endpoint /api/contact/send"
    );
    console.log(
      "4. Consultez les logs Vercel pour voir les erreurs d√©taill√©es"
    );
  } catch (error) {
    console.error("‚ùå Erreur lors du test complet:", error);
  }
}

// Lancer le test
runFullTest();
