#!/usr/bin/env node

/**
 * Script de test pour v√©rifier l'int√©gration d'AppPromotionCard avec les props
 */

const http = require('http');

console.log('üîç TEST D\'INT√âGRATION - AppPromotionCard avec props\n');

// Test 1: V√©rifier que l'API promotions fonctionne
function testAPI() {
  return new Promise((resolve, reject) => {
    console.log('üì° Test 1: V√©rification de l\'API promotions...');
    
    const request = http.get('http://localhost:3001/api/airtable/promotions', (response) => {
      let data = '';
      
      response.on('data', (chunk) => {
        data += chunk;
      });
      
      response.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          const promotions = jsonData.data || [];
          
          console.log(`‚úÖ API fonctionne: ${promotions.length} promotions trouv√©es`);
          console.log('üìù Premi√®res promotions:');
          
          promotions.slice(0, 2).forEach((promo, index) => {
            console.log(`  ${index + 1}. ${promo.title} (-${promo.discount}%)`);
          });
          
          resolve(promotions);
        } catch (error) {
          console.log('‚ùå Erreur parsing JSON API');
          reject(error);
        }
      });
    });
    
    request.on('error', (error) => {
      console.log('‚ùå Erreur connexion API');
      reject(error);
    });
    
    request.setTimeout(5000, () => {
      request.destroy();
      console.log('‚ùå Timeout API');
      reject(new Error('Timeout'));
    });
  });
}

// Test 2: V√©rifier que la page d'accueil se charge
function testHomePage() {
  return new Promise((resolve, reject) => {
    console.log('\nüì± Test 2: V√©rification de la page d\'accueil...');
    
    const request = http.get('http://localhost:3001/', (response) => {
      let data = '';
      
      response.on('data', (chunk) => {
        data += chunk;
      });
      
      response.on('end', () => {
        // V√©rifier que la page contient les √©l√©ments attendus
        const hasPromotions = data.includes('AppPromotionCard');
        const hasAirtableRef = data.includes('airtableStore');
        
        console.log(`‚úÖ Page d'accueil charg√©e (${Math.round(data.length / 1024)}KB)`);
        console.log(`üìã Contient AppPromotionCard: ${hasPromotions ? '‚úÖ' : '‚ùå'}`);
        console.log(`üìã Contient r√©f√©rence Airtable: ${hasAirtableRef ? '‚úÖ' : '‚ùå'}`);
        
        resolve({ size: data.length, hasPromotions, hasAirtableRef });
      });
    });
    
    request.on('error', (error) => {
      console.log('‚ùå Erreur chargement page');
      reject(error);
    });
    
    request.setTimeout(5000, () => {
      request.destroy();
      console.log('‚ùå Timeout page');
      reject(new Error('Timeout'));
    });
  });
}

async function runTests() {
  try {
    // Test API
    const promotions = await testAPI();
    
    // Test page d'accueil
    const pageData = await testHomePage();
    
    console.log('\nüìä R√âSUM√â DES TESTS:');
    console.log('===================');
    console.log(`‚úÖ API promotions: ${promotions.length} √©l√©ments`);
    console.log(`‚úÖ Page d'accueil: ${pageData.hasPromotions ? 'AppPromotionCard pr√©sent' : 'Composant manquant'}`);
    console.log(`‚úÖ Store Airtable: ${pageData.hasAirtableRef ? 'R√©f√©renc√©' : 'Manquant'}`);
    
    console.log('\nüéØ CONFIGURATION ACTUELLE:');
    console.log('==========================');
    console.log('‚Ä¢ Page index.vue utilise: <AppPromotionCard :promotions="airtableStore.activePromotions.slice(0, 2)" />');
    console.log('‚Ä¢ Limitation √† 2 promotions via slice(0, 2)');
    console.log('‚Ä¢ Donn√©es dynamiques depuis Airtable');
    console.log('‚Ä¢ Composant r√©utilisable avec props');
    
    if (promotions.length >= 2) {
      console.log('\n‚ú® SUCC√àS: Configuration optimale!');
      console.log('  - Le composant AppPromotionCard accepte les promotions via props');
      console.log('  - Les donn√©es viennent d\'Airtable (dynamiques)');
      console.log('  - L\'affichage est limit√© √† 2 promotions sur l\'accueil');
      console.log('  - La page /promotions peut afficher toutes les promotions');
    } else {
      console.log('\n‚ö†Ô∏è  ATTENTION: Pas assez de promotions dans Airtable');
      console.log('  - Ajoutez plus de promotions dans votre base Airtable');
    }
    
  } catch (error) {
    console.error('\n‚ùå ERREUR LORS DES TESTS:', error.message);
    console.log('\nüîß V√âRIFICATIONS:');
    console.log('  1. Le serveur Nuxt est-il d√©marr√© ? (npm run dev)');
    console.log('  2. Les variables Airtable sont-elles configur√©es ?');
    console.log('  3. La base Airtable contient-elle des promotions ?');
  }
}

// Ex√©cuter les tests
runTests();
