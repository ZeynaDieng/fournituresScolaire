#!/usr/bin/env node

/**
 * Script de configuration compl√®te Airtable
 * Ce script automatise tout le processus de configuration et synchronisation
 */

const { spawn } = require("child_process");
const path = require("path");

function runScript(command, description) {
  return new Promise((resolve, reject) => {
    console.log(`\nüîÑ ${description}...`);
    console.log(`   Commande: ${command}`);

    const [cmd, ...args] = command.split(" ");
    const process = spawn(cmd, args, {
      cwd: path.resolve(__dirname, ".."),
      stdio: "inherit",
    });

    process.on("close", (code) => {
      if (code === 0) {
        console.log(`‚úÖ ${description} termin√© avec succ√®s`);
        resolve();
      } else {
        console.error(`‚ùå ${description} a √©chou√© avec le code ${code}`);
        reject(new Error(`Script failed with code ${code}`));
      }
    });

    process.on("error", (error) => {
      console.error(`‚ùå Erreur lors de l'ex√©cution de ${description}:`, error);
      reject(error);
    });
  });
}

async function waitForUser(message) {
  console.log(`\n‚è∏Ô∏è  ${message}`);
  console.log("   Appuyez sur Entr√©e pour continuer...");

  return new Promise((resolve) => {
    process.stdin.once("data", () => {
      resolve();
    });
  });
}

async function main() {
  console.log("üöÄ Configuration compl√®te d'Airtable");
  console.log("=====================================\n");

  try {
    // √âtape 1: V√©rifier la configuration actuelle
    console.log("üìã √âTAPE 1: V√©rification de la configuration");
    await runScript(
      "npm run test:airtable-config",
      "V√©rification de la configuration Airtable"
    );

    await waitForUser(
      "V√©rifiez les r√©sultats ci-dessus. Si des tables ou champs sont manquants, continuez."
    );

    // √âtape 2: Cr√©er les champs manquants automatiquement
    console.log("\nüìã √âTAPE 2: Cr√©ation automatique des champs");
    await runScript("npm run create:fields", "Cr√©ation des champs manquants");

    await waitForUser(
      "V√©rifiez si la cr√©ation automatique a fonctionn√©. Si certains champs n'ont pas pu √™tre cr√©√©s, ajoutez-les manuellement dans Airtable avant de continuer."
    );

    // √âtape 3: V√©rifier √† nouveau la configuration
    console.log("\nüìã √âTAPE 3: V√©rification post-cr√©ation");
    await runScript(
      "npm run test:airtable-config",
      "V√©rification apr√®s cr√©ation des champs"
    );

    await waitForUser(
      "Si tous les champs sont pr√©sents, continuez. Sinon, ajoutez manuellement les champs manquants."
    );

    // √âtape 4: R√©initialiser et synchroniser
    console.log("\nüìã √âTAPE 4: Synchronisation compl√®te");
    await runScript(
      "npm run reset:airtable",
      "Nettoyage des donn√©es existantes"
    );

    console.log("\n‚è±Ô∏è  Attente de 3 secondes...");
    await new Promise((resolve) => setTimeout(resolve, 3000));

    await runScript(
      "npm run sync:tables",
      "Synchronisation vers les tables s√©par√©es"
    );

    // √âtape 5: V√©rification finale
    console.log("\nüìã √âTAPE 5: V√©rification finale");
    await runScript(
      "npm run inspect:airtable",
      "Inspection finale des donn√©es"
    );

    console.log("\nüéâ Configuration compl√®te termin√©e!");
    console.log("=====================================");
    console.log("‚úÖ Airtable est maintenant configur√© et synchronis√©");
    console.log(
      "üí° Vous pouvez maintenant g√©rer votre catalogue directement depuis Airtable"
    );
    console.log(
      "üìñ Consultez le AIRTABLE_SETUP_GUIDE.md pour plus d'informations"
    );
  } catch (error) {
    console.error("\n‚ùå Erreur lors de la configuration:", error.message);
    console.log("\nüîß Actions recommand√©es:");
    console.log("1. V√©rifiez vos variables d'environnement (.env)");
    console.log("2. Assurez-vous que vos tables Airtable existent");
    console.log("3. V√©rifiez vos permissions API Airtable");
    console.log("4. Consultez le AIRTABLE_SETUP_GUIDE.md");
    process.exit(1);
  }
}

// Permettre l'interruption propre
process.on("SIGINT", () => {
  console.log("\n\n‚èπÔ∏è  Configuration interrompue par l'utilisateur");
  process.exit(0);
});

// Ex√©cuter le script
if (require.main === module) {
  main().catch(console.error);
}
