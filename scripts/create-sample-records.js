#!/usr/bin/env node
// scripts/create-sample-records.js
// Script pour cr√©er des enregistrements d'exemple qui √©tabliront les champs dans Airtable

const AIRTABLE_API_KEY =
  "patrR71W7giuFrjP0.fadb29458ae74396bce8c0ffb8f2033c35164715f4546198bb8bbafb593ad83a";
const AIRTABLE_BASE_ID = "appOtYkVavA4MMMnN";

// IDs des tables
const TABLES = {
  PROMOTIONS: "tblrUYgl2PgYIEMY5",
  TESTIMONIALS: "tblYjfi1FFk1CCH46",
};

async function createSampleRecords() {
  console.log("üöÄ CR√âATION D'ENREGISTREMENTS D'EXEMPLE");
  console.log("=".repeat(50));

  try {
    // 1. Cr√©er un enregistrement d'exemple pour promotions
    console.log("\nüì£ Cr√©ation d'un √©chantillon de promotion...");

    const promotionSample = {
      records: [
        {
          fields: {
            Title: "√âchantillon - Pack Rentr√©e",
            Description:
              "Exemple de promotion pour cr√©er les champs automatiquement",
            Discount: 25,
            Type: "percentage",
            Category: "Packs",
            Icon: "üéí",
          },
        },
      ],
    };

    const promoResponse = await fetch(
      `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${TABLES.PROMOTIONS}`,
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${AIRTABLE_API_KEY}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(promotionSample),
      }
    );

    if (promoResponse.ok) {
      const promoResult = await promoResponse.json();
      console.log(
        "‚úÖ √âchantillon de promotion cr√©√©:",
        promoResult.records[0].id
      );
    } else {
      const promoError = await promoResponse.json();
      console.error("‚ùå Erreur promotion:", promoError);
    }

    // 2. Cr√©er un enregistrement d'exemple pour testimonials
    console.log("\nüí¨ Cr√©ation d'un √©chantillon de t√©moignage...");

    const testimonialSample = {
      records: [
        {
          fields: {
            Name: "Test User",
            Role: "Testeur",
            Text: "Exemple de t√©moignage pour cr√©er les champs automatiquement",
            Rating: 5,
            Location: "Test City",
          },
        },
      ],
    };

    const testResponse = await fetch(
      `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${TABLES.TESTIMONIALS}`,
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${AIRTABLE_API_KEY}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(testimonialSample),
      }
    );

    if (testResponse.ok) {
      const testResult = await testResponse.json();
      console.log(
        "‚úÖ √âchantillon de t√©moignage cr√©√©:",
        testResult.records[0].id
      );
    } else {
      const testError = await testResponse.json();
      console.error("‚ùå Erreur t√©moignage:", testError);
    }

    console.log("\nüéØ √âTAPES SUIVANTES:");
    console.log("1. V√©rifiez dans Airtable que les champs ont √©t√© cr√©√©s");
    console.log("2. Ajoutez manuellement les champs manquants si n√©cessaire");
    console.log("3. Ex√©cutez: node scripts/fill-airtable-data.js");
    console.log("4. V√©rifiez: node scripts/inspect-airtable-structure.js");
  } catch (error) {
    console.error("‚ùå Erreur:", error);
  }
}

createSampleRecords();
