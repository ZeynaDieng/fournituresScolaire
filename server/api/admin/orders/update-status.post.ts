// /server/api/admin/orders-airtable/update-status.post.ts
import {
  updateLocalOrderStatus as updateLocalStorage,
  getAllOrders,
} from "../../../../utils/local-storage";
import { addOrderToMasterExcel } from "../../../../utils/excel-master";
import { sendOrderNotification } from "../../../../utils/email-notifications";

export default defineEventHandler(async (event) => {
  try {
    const body = await readBody(event);

    if (!body.orderRef) {
      throw createError({
        statusCode: 400,
        statusMessage: "R√©f√©rence de commande manquante",
      });
    }

    const { orderRef, ...statusUpdates } = body;

    // Validation des statuts
    const validOrderStatuses = [
      "En attente",
      "Confirm√©e",
      "En pr√©paration",
      "Exp√©di√©e",
      "Livr√©e",
      "Annul√©e",
    ];
    const validPaymentStatuses = ["En attente", "Pay√©", "Rembours√©", "Annul√©"];

    if (
      statusUpdates.status &&
      !validOrderStatuses.includes(statusUpdates.status)
    ) {
      throw createError({
        statusCode: 400,
        statusMessage: "Statut de commande invalide",
      });
    }

    if (
      statusUpdates.paymentStatus &&
      !validPaymentStatuses.includes(statusUpdates.paymentStatus)
    ) {
      throw createError({
        statusCode: 400,
        statusMessage: "Statut de paiement invalide",
      });
    }

    // 1. Mettre √† jour dans le stockage local
    const localResult = await updateLocalStorage(orderRef, statusUpdates);
    console.log(
      `‚úÖ Statut mis √† jour localement pour ${orderRef}:`,
      statusUpdates
    );

    // 2. R√©g√©n√©rer le fichier Excel avec toutes les commandes mises √† jour
    try {
      const allOrders = await getAllOrders();
      // Le fichier Excel sera recr√©√© avec tous les statuts √† jour
      console.log(
        `üìä R√©g√©n√©ration du fichier Excel avec ${allOrders.length} commandes`
      );
    } catch (error) {
      console.warn("‚ö†Ô∏è Erreur r√©g√©n√©ration Excel:", error.message);
    }

    // 3. Google Sheets supprim√© - plus n√©cessaire

    // 4. Envoyer notification si statut important chang√©
    if (
      statusUpdates.status === "Livr√©e" ||
      statusUpdates.status === "Exp√©di√©e"
    ) {
      try {
        const order = localResult;
        if (order && order.customer?.email) {
          console.log(
            `üìß Envoi notification changement statut: ${statusUpdates.status}`
          );
        }
      } catch (error) {
        console.warn("‚ö†Ô∏è Erreur notification email:", error.message);
      }
    }

    return {
      success: true,
      message: "Statut mis √† jour avec succ√®s",
        data: {
        orderRef,
        updates: statusUpdates,
        local: localResult ? true : false,
      },
    };
  } catch (error: any) {
    console.error("‚ùå Erreur API update-status:", error);

    throw createError({
      statusCode: error.statusCode || 500,
      statusMessage: error.message || "Erreur lors de la mise √† jour du statut",
    });
  }
});
